"""Add indexes and constraints for performance

Revision ID: 002
Revises: 001
Create Date: 2024-08-19 12:30:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '002'
down_revision: Union[str, None] = '001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add performance indexes
    op.create_index('ix_events_category_start_at', 'events', ['category', 'start_at'], unique=False)
    op.create_index('ix_events_calendar_start_at', 'events', ['calendar_id', 'start_at'], unique=False)
    op.create_index('ix_events_all_day_start_at', 'events', ['all_day', 'start_at'], unique=False)
    
    # Add indexes for parsing requests
    op.create_index('ix_parsing_requests_status_created', 'parsing_requests', ['status', 'created_at'], unique=False)
    op.create_index('ix_parsing_requests_ai_provider', 'parsing_requests', ['ai_provider'], unique=False)
    
    # Add indexes for usage logs
    op.create_index('ix_usage_logs_action_created', 'usage_logs', ['action', 'created_at'], unique=False)
    op.create_index('ix_usage_logs_resource_type', 'usage_logs', ['resource_type'], unique=False)
    
    # Add indexes for calendars
    op.create_index('ix_calendars_user_default', 'calendars', ['user_id', 'is_default'], unique=False)
    op.create_index('ix_calendars_last_synced', 'calendars', ['last_synced_at'], unique=False)
    
    # Add indexes for subscriptions
    op.create_index('ix_user_subscriptions_status_period', 'user_subscriptions', ['status', 'current_period_end'], unique=False)
    op.create_index('ix_user_subscriptions_stripe_id', 'user_subscriptions', ['stripe_subscription_id'], unique=True)
    
    # Add check constraints
    op.create_check_constraint(
        'check_events_start_before_end',
        'events',
        'start_at < end_at OR end_at IS NULL'
    )
    
    op.create_check_constraint(
        'check_confidence_score_range',
        'events',
        'ai_confidence IS NULL OR (ai_confidence >= 0.0 AND ai_confidence <= 1.0)'
    )
    
    op.create_check_constraint(
        'check_parsing_confidence_range',
        'parsing_requests',
        'confidence_score IS NULL OR (confidence_score >= 0.0 AND confidence_score <= 1.0)'
    )
    
    op.create_check_constraint(
        'check_subscription_price_positive',
        'subscription_plans',
        'price >= 0'
    )
    
    # Add partial indexes for active records
    op.execute("""
        CREATE INDEX CONCURRENTLY ix_users_active_email 
        ON users (email) 
        WHERE is_active = true
    """)
    
    op.execute("""
        CREATE INDEX CONCURRENTLY ix_subscription_plans_active 
        ON subscription_plans (name, price) 
        WHERE is_active = true
    """)
    
    op.execute("""
        CREATE INDEX CONCURRENTLY ix_events_upcoming 
        ON events (user_id, start_at) 
        WHERE start_at > now()
    """)
    
    # Add GIN index for JSONB columns for better search performance
    op.execute("""
        CREATE INDEX CONCURRENTLY ix_users_preferences_gin 
        ON users USING gin (preferences)
    """)
    
    op.execute("""
        CREATE INDEX CONCURRENTLY ix_events_metadata_gin 
        ON events USING gin (metadata)
    """)
    
    op.execute("""
        CREATE INDEX CONCURRENTLY ix_parsing_requests_parsed_data_gin 
        ON parsing_requests USING gin (parsed_data)
    """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop GIN indexes
    op.execute("DROP INDEX CONCURRENTLY IF EXISTS ix_parsing_requests_parsed_data_gin")
    op.execute("DROP INDEX CONCURRENTLY IF EXISTS ix_events_metadata_gin")
    op.execute("DROP INDEX CONCURRENTLY IF EXISTS ix_users_preferences_gin")
    
    # Drop partial indexes
    op.execute("DROP INDEX CONCURRENTLY IF EXISTS ix_events_upcoming")
    op.execute("DROP INDEX CONCURRENTLY IF EXISTS ix_subscription_plans_active")
    op.execute("DROP INDEX CONCURRENTLY IF EXISTS ix_users_active_email")
    
    # Drop check constraints
    op.drop_constraint('check_subscription_price_positive', 'subscription_plans', type_='check')
    op.drop_constraint('check_parsing_confidence_range', 'parsing_requests', type_='check')
    op.drop_constraint('check_confidence_score_range', 'events', type_='check')
    op.drop_constraint('check_events_start_before_end', 'events', type_='check')
    
    # Drop regular indexes
    op.drop_index('ix_user_subscriptions_stripe_id', table_name='user_subscriptions')
    op.drop_index('ix_user_subscriptions_status_period', table_name='user_subscriptions')
    op.drop_index('ix_calendars_last_synced', table_name='calendars')
    op.drop_index('ix_calendars_user_default', table_name='calendars')
    op.drop_index('ix_usage_logs_resource_type', table_name='usage_logs')
    op.drop_index('ix_usage_logs_action_created', table_name='usage_logs')
    op.drop_index('ix_parsing_requests_ai_provider', table_name='parsing_requests')
    op.drop_index('ix_parsing_requests_status_created', table_name='parsing_requests')
    op.drop_index('ix_events_all_day_start_at', table_name='events')
    op.drop_index('ix_events_calendar_start_at', table_name='events')
    op.drop_index('ix_events_category_start_at', table_name='events')
    
    # ### end Alembic commands ###