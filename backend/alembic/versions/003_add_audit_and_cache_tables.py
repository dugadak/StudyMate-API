"""Add audit and cache tables

Revision ID: 003
Revises: 002
Create Date: 2024-08-19 13:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '003'
down_revision: Union[str, None] = '002'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create audit_logs table for comprehensive auditing
    op.create_table('audit_logs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('table_name', sa.String(), nullable=False),
        sa.Column('record_id', sa.String(), nullable=False),
        sa.Column('action', sa.String(), nullable=False),  # INSERT, UPDATE, DELETE
        sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('changed_fields', sa.ARRAY(sa.String()), nullable=True),
        sa.Column('ip_address', sa.String(), nullable=True),
        sa.Column('user_agent', sa.String(), nullable=True),
        sa.Column('session_id', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index('ix_audit_logs_user_action', 'audit_logs', ['user_id', 'action', 'created_at'], unique=False)
    op.create_index('ix_audit_logs_table_record', 'audit_logs', ['table_name', 'record_id'], unique=False)
    
    # Create ai_model_cache table for caching AI responses
    op.create_table('ai_model_cache',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('input_hash', sa.String(length=64), nullable=False),  # SHA-256 hash of input
        sa.Column('input_text', sa.Text(), nullable=False),
        sa.Column('ai_provider', sa.String(), nullable=False),  # openai, anthropic, together
        sa.Column('model_name', sa.String(), nullable=False),
        sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('confidence_score', sa.Float(), nullable=True),
        sa.Column('cache_hit_count', sa.Integer(), server_default=sa.text('1'), nullable=False),
        sa.Column('last_used_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_model_cache_id'), 'ai_model_cache', ['id'], unique=False)
    op.create_index('ix_ai_model_cache_input_hash', 'ai_model_cache', ['input_hash'], unique=True)
    op.create_index('ix_ai_model_cache_provider_model', 'ai_model_cache', ['ai_provider', 'model_name'], unique=False)
    op.create_index('ix_ai_model_cache_expires_at', 'ai_model_cache', ['expires_at'], unique=False)
    
    # Create rate_limit_cache table for rate limiting
    op.create_table('rate_limit_cache',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('key', sa.String(), nullable=False),  # user_id:endpoint or ip:endpoint
        sa.Column('request_count', sa.Integer(), server_default=sa.text('1'), nullable=False),
        sa.Column('window_start', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('window_size_seconds', sa.Integer(), nullable=False),
        sa.Column('max_requests', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rate_limit_cache_id'), 'rate_limit_cache', ['id'], unique=False)
    op.create_index('ix_rate_limit_cache_key', 'rate_limit_cache', ['key'], unique=True)
    op.create_index('ix_rate_limit_cache_window_start', 'rate_limit_cache', ['window_start'], unique=False)
    
    # Create webhook_events table for external webhook handling
    op.create_table('webhook_events',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('source', sa.String(), nullable=False),  # stripe, timetree, etc.
        sa.Column('event_type', sa.String(), nullable=False),
        sa.Column('event_id', sa.String(), nullable=False),  # external event ID
        sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('processed', sa.Boolean(), server_default=sa.text('false'), nullable=False),
        sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('retry_count', sa.Integer(), server_default=sa.text('0'), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_webhook_events_id'), 'webhook_events', ['id'], unique=False)
    op.create_index('ix_webhook_events_source_event_id', 'webhook_events', ['source', 'event_id'], unique=True)
    op.create_index('ix_webhook_events_processed_created', 'webhook_events', ['processed', 'created_at'], unique=False)
    
    # Create system_health table for monitoring
    op.create_table('system_health',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('service_name', sa.String(), nullable=False),
        sa.Column('status', sa.String(), nullable=False),  # healthy, degraded, down
        sa.Column('response_time_ms', sa.Integer(), nullable=True),
        sa.Column('error_rate', sa.Float(), nullable=True),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('checked_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_system_health_id'), 'system_health', ['id'], unique=False)
    op.create_index('ix_system_health_service_checked', 'system_health', ['service_name', 'checked_at'], unique=False)
    
    # Add idempotency_keys table for preventing duplicate operations
    op.create_table('idempotency_keys',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('key', sa.String(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('endpoint', sa.String(), nullable=False),
        sa.Column('request_hash', sa.String(length=64), nullable=False),
        sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('status_code', sa.Integer(), nullable=True),
        sa.Column('completed', sa.Boolean(), server_default=sa.text('false'), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_idempotency_keys_id'), 'idempotency_keys', ['id'], unique=False)
    op.create_index('ix_idempotency_keys_key', 'idempotency_keys', ['key'], unique=True)
    op.create_index('ix_idempotency_keys_expires_at', 'idempotency_keys', ['expires_at'], unique=False)
    
    # Add check constraints
    op.create_check_constraint(
        'check_audit_action_valid',
        'audit_logs',
        "action IN ('INSERT', 'UPDATE', 'DELETE')"
    )
    
    op.create_check_constraint(
        'check_system_health_status_valid',
        'system_health',
        "status IN ('healthy', 'degraded', 'down')"
    )
    
    op.create_check_constraint(
        'check_rate_limit_positive_values',
        'rate_limit_cache',
        'request_count > 0 AND window_size_seconds > 0 AND max_requests > 0'
    )
    
    # Create cleanup function for expired records
    op.execute("""
        CREATE OR REPLACE FUNCTION cleanup_expired_cache_records()
        RETURNS void AS $$
        BEGIN
            -- Clean up expired AI cache entries
            DELETE FROM ai_model_cache 
            WHERE expires_at IS NOT NULL AND expires_at < now();
            
            -- Clean up old rate limit entries (older than 24 hours)
            DELETE FROM rate_limit_cache 
            WHERE window_start < now() - interval '24 hours';
            
            -- Clean up expired idempotency keys
            DELETE FROM idempotency_keys 
            WHERE expires_at < now();
            
            -- Clean up old audit logs (older than 1 year)
            DELETE FROM audit_logs 
            WHERE created_at < now() - interval '1 year';
            
            -- Clean up old usage logs (older than 6 months)
            DELETE FROM usage_logs 
            WHERE created_at < now() - interval '6 months';
            
            -- Clean up processed webhook events (older than 30 days)
            DELETE FROM webhook_events 
            WHERE processed = true AND processed_at < now() - interval '30 days';
        END;
        $$ LANGUAGE plpgsql;
    """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop cleanup function
    op.execute("DROP FUNCTION IF EXISTS cleanup_expired_cache_records()")
    
    # Drop check constraints
    op.drop_constraint('check_rate_limit_positive_values', 'rate_limit_cache', type_='check')
    op.drop_constraint('check_system_health_status_valid', 'system_health', type_='check')
    op.drop_constraint('check_audit_action_valid', 'audit_logs', type_='check')
    
    # Drop tables and indexes
    op.drop_index('ix_idempotency_keys_expires_at', table_name='idempotency_keys')
    op.drop_index('ix_idempotency_keys_key', table_name='idempotency_keys')
    op.drop_index(op.f('ix_idempotency_keys_id'), table_name='idempotency_keys')
    op.drop_table('idempotency_keys')
    
    op.drop_index('ix_system_health_service_checked', table_name='system_health')
    op.drop_index(op.f('ix_system_health_id'), table_name='system_health')
    op.drop_table('system_health')
    
    op.drop_index('ix_webhook_events_processed_created', table_name='webhook_events')
    op.drop_index('ix_webhook_events_source_event_id', table_name='webhook_events')
    op.drop_index(op.f('ix_webhook_events_id'), table_name='webhook_events')
    op.drop_table('webhook_events')
    
    op.drop_index('ix_rate_limit_cache_window_start', table_name='rate_limit_cache')
    op.drop_index('ix_rate_limit_cache_key', table_name='rate_limit_cache')
    op.drop_index(op.f('ix_rate_limit_cache_id'), table_name='rate_limit_cache')
    op.drop_table('rate_limit_cache')
    
    op.drop_index('ix_ai_model_cache_expires_at', table_name='ai_model_cache')
    op.drop_index('ix_ai_model_cache_provider_model', table_name='ai_model_cache')
    op.drop_index('ix_ai_model_cache_input_hash', table_name='ai_model_cache')
    op.drop_index(op.f('ix_ai_model_cache_id'), table_name='ai_model_cache')
    op.drop_table('ai_model_cache')
    
    op.drop_index('ix_audit_logs_table_record', table_name='audit_logs')
    op.drop_index('ix_audit_logs_user_action', table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_table('audit_logs')
    
    # ### end Alembic commands ###