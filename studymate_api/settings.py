"""
Django settings for studymate_api project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
import socket
from typing import List, Dict, Any
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default=None)

# Validate critical settings
if not SECRET_KEY:
    raise ValueError('SECRET_KEY must be set in environment variables. Please add SECRET_KEY to your .env file.')
if SECRET_KEY and SECRET_KEY.startswith('django-insecure-'):
    if not DEBUG:
        raise ValueError('Insecure SECRET_KEY detected. Please generate a secure key for production.')

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])

# Environment detection
ENVIRONMENT = config('ENVIRONMENT', default='development')
IS_PRODUCTION = ENVIRONMENT == 'production'
IS_STAGING = ENVIRONMENT == 'staging'


# Application definition

INSTALLED_APPS = [
    'daphne',  # WebSocket 지원을 위해 최상단에 배치
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'corsheaders',
    'channels',  # WebSocket 지원
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'drf_spectacular',
    'silk',
    
    'accounts',
    'study',
    'quiz',
    'subscription',
    'notifications',
    'home',
    'collaboration',
    'stats',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'studymate_api.middleware.RequestLoggingMiddleware',
    'studymate_api.middleware.PerformanceMonitoringMiddleware',
    'studymate_api.middleware.RateLimitMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'studymate_api.middleware.ErrorTrackingMiddleware',
]

# Add performance monitoring middleware only in development
if DEBUG:
    MIDDLEWARE.insert(1, 'silk.middleware.SilkMiddleware')

ROOT_URLCONF = 'studymate_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'studymate_api.wsgi.application'
ASGI_APPLICATION = 'studymate_api.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE', default='django.db.backends.postgresql'),
        'NAME': config('DB_NAME', default='studymate_db'),
        'USER': config('DB_USER', default='postgres'),
        'PASSWORD': config('DB_PASSWORD', default='password'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432', cast=int),
        'CONN_MAX_AGE': config('DB_CONN_MAX_AGE', default=300, cast=int),
        'OPTIONS': {
            'MAX_CONNS': config('DB_MAX_CONNS', default=20, cast=int),
            'MIN_CONNS': config('DB_MIN_CONNS', default=5, cast=int),
            'connect_timeout': 10,
        },
        'TEST': {
            'NAME': 'test_studymate_db',
        }
    }
}

# SQLite fallback for development
if config('USE_SQLITE', default=False, cast=bool):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': config('PAGE_SIZE', default=20, cast=int),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': config('THROTTLE_ANON', default='100/hour'),
        'user': config('THROTTLE_USER', default='1000/hour'),
        'login': '10/minute',
        'register': '5/minute',
        'ai_generation': '20/hour',
        'stripe_webhook': '1000/hour',
    },
    'EXCEPTION_HANDLER': 'studymate_api.exceptions.custom_exception_handler',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATETIME_INPUT_FORMATS': ['%Y-%m-%d %H:%M:%S', '%Y-%m-%dT%H:%M:%S'],
}

# Django Allauth
SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']

# CORS Settings
# CORS Settings - more secure configuration
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000',
    cast=lambda v: [s.strip() for s in v.split(',') if s.strip()]
)

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=False, cast=bool)

# Only allow all origins in development
if DEBUG and not IS_PRODUCTION:
    CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_EXPOSE_HEADERS = [
    'x-total-count',
    'x-page-count',
]

# Celery Configuration
# Celery Configuration - Enhanced
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Seoul'
CELERY_ENABLE_UTC = True
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = config('CELERY_TASK_TIME_LIMIT', default=300, cast=int)
CELERY_TASK_SOFT_TIME_LIMIT = config('CELERY_TASK_SOFT_TIME_LIMIT', default=240, cast=int)
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000
CELERY_BEAT_SCHEDULE = {}
# Django Channels 설정
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [config('REDIS_URL', default='redis://localhost:6379/1')],
            "capacity": 1500,  # 채널당 최대 메시지 수
            "expiry": 60,      # 메시지 만료 시간 (초)
            "group_expiry": 86400,  # 그룹 만료 시간 (초)
            "channel_capacity": {
                "http.request": 200,
                "websocket.send": 10,
                "websocket.receive": 10,
            },
        },
    },
}

# 실시간 분석 설정
REALTIME_ANALYTICS = {
    'ANALYSIS_INTERVAL': config('REALTIME_ANALYSIS_INTERVAL', default=30, cast=int),  # 초
    'FOCUS_WINDOW': config('REALTIME_FOCUS_WINDOW', default=300, cast=int),  # 초
    'PREDICTION_HORIZON': config('REALTIME_PREDICTION_HORIZON', default=3600, cast=int),  # 초
    'LOW_FOCUS_THRESHOLD': config('REALTIME_LOW_FOCUS_THRESHOLD', default=70, cast=float),
    'HIGH_EFFICIENCY_THRESHOLD': config('REALTIME_HIGH_EFFICIENCY_THRESHOLD', default=85, cast=float),
    'BREAK_RECOMMENDATION_THRESHOLD': config('REALTIME_BREAK_THRESHOLD', default=45, cast=int),  # 분
    'MAX_ACTIVE_SESSIONS': config('REALTIME_MAX_SESSIONS', default=1000, cast=int),
    'SESSION_TIMEOUT': config('REALTIME_SESSION_TIMEOUT', default=7200, cast=int),  # 초 (2시간)
    'ENABLE_PREDICTIONS': config('REALTIME_ENABLE_PREDICTIONS', default=True, cast=bool),
    'ENABLE_NOTIFICATIONS': config('REALTIME_ENABLE_NOTIFICATIONS', default=True, cast=bool),
}

# 스트리밍 처리 설정
STREAMING_CONFIG = {
    'BUFFER_SIZE': config('STREAMING_BUFFER_SIZE', default=10000, cast=int),
    'BATCH_SIZE': config('STREAMING_BATCH_SIZE', default=100, cast=int),
    'FLUSH_INTERVAL': config('STREAMING_FLUSH_INTERVAL', default=30.0, cast=float),
    'MAX_PROCESSING_QUEUES': config('STREAMING_MAX_QUEUES', default=50, cast=int),
    'METRICS_UPDATE_INTERVAL': config('STREAMING_METRICS_INTERVAL', default=10, cast=int),
    'AUTO_START': config('STREAMING_AUTO_START', default=True, cast=bool),
}

# OpenTelemetry 분산 추적 설정
OTEL_ENABLED = config('OTEL_ENABLED', default=True, cast=bool)
OTEL_SERVICE_NAME = config('OTEL_SERVICE_NAME', default='studymate-api')
OTEL_SERVICE_VERSION = config('OTEL_SERVICE_VERSION', default='1.0.0')

# Jaeger 설정
JAEGER_ENDPOINT = config('JAEGER_ENDPOINT', default='')
JAEGER_AGENT_HOST = config('JAEGER_AGENT_HOST', default='localhost')
JAEGER_AGENT_PORT = config('JAEGER_AGENT_PORT', default=14268, cast=int)

# OTLP Exporter 설정 (Observability 플랫폼용)
OTEL_EXPORTER_OTLP_ENDPOINT = config('OTEL_EXPORTER_OTLP_ENDPOINT', default='')
OTEL_EXPORTER_OTLP_HEADERS = config('OTEL_EXPORTER_OTLP_HEADERS', default='', 
                                   cast=lambda v: dict([h.split('=') for h in v.split(',') if '=' in h]) if v else {})

# 분산 추적 설정
DISTRIBUTED_TRACING = {
    'ENABLED': OTEL_ENABLED,
    'SERVICE_NAME': OTEL_SERVICE_NAME,
    'SERVICE_VERSION': OTEL_SERVICE_VERSION,
    'JAEGER_ENDPOINT': JAEGER_ENDPOINT,
    'OTLP_ENDPOINT': OTEL_EXPORTER_OTLP_ENDPOINT,
    'OTLP_HEADERS': OTEL_EXPORTER_OTLP_HEADERS,
    'TRACE_SAMPLE_RATE': config('OTEL_TRACE_SAMPLE_RATE', default=0.1, cast=float),
    'AUTO_INSTRUMENT': config('OTEL_AUTO_INSTRUMENT', default=True, cast=bool),
    'CONSOLE_EXPORTER': config('OTEL_CONSOLE_EXPORTER', default=DEBUG, cast=bool),
}

# Zero Trust 보안 설정
ZERO_TRUST_ENABLED = config('ZERO_TRUST_ENABLED', default=True, cast=bool)

# GeoIP 데이터베이스 경로
GEOIP_DB_PATH = config('GEOIP_DB_PATH', default='')

# Zero Trust 보안 정책
ZERO_TRUST_POLICY = {
    'TRUST_SCORE_THRESHOLD': config('ZT_TRUST_THRESHOLD', default=0.6, cast=float),
    'MFA_REQUIRED_THRESHOLD': config('ZT_MFA_THRESHOLD', default=0.5, cast=float),
    'ADMIN_REQUIRED_THRESHOLD': config('ZT_ADMIN_THRESHOLD', default=0.3, cast=float),
    'DEVICE_TRUST_DURATION': config('ZT_DEVICE_TRUST_DAYS', default=30, cast=int) * 86400,
    'LOCATION_TRUST_DURATION': config('ZT_LOCATION_TRUST_DAYS', default=7, cast=int) * 86400,
    'MAX_FAILED_ATTEMPTS': config('ZT_MAX_FAILED_ATTEMPTS', default=5, cast=int),
    'SESSION_TIMEOUT': config('ZT_SESSION_TIMEOUT', default=3600, cast=int),
    'QUARANTINE_DURATION': config('ZT_QUARANTINE_HOURS', default=24, cast=int) * 3600,
}

# 위협 탐지 설정
THREAT_DETECTION = {
    'RATE_LIMIT_PER_MINUTE': config('THREAT_RATE_LIMIT', default=60, cast=int),
    'BRUTE_FORCE_THRESHOLD': config('THREAT_BRUTE_FORCE', default=10, cast=int),
    'ENUMERATION_THRESHOLD': config('THREAT_ENUMERATION', default=20, cast=int),
    'DDOS_THRESHOLD': config('THREAT_DDOS', default=100, cast=int),
    'ENABLE_GEO_BLOCKING': config('THREAT_GEO_BLOCKING', default=False, cast=bool),
    'BLOCKED_COUNTRIES': config('THREAT_BLOCKED_COUNTRIES', default='', 
                               cast=lambda v: [c.strip() for c in v.split(',') if c.strip()]),
}

CELERY_TASK_ROUTES = {
    'notifications.tasks.*': {'queue': 'notifications'},
    'study.tasks.*': {'queue': 'ai_tasks'},
    'subscription.tasks.*': {'queue': 'payments'},
}

# Stripe Settings - Enhanced
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')
STRIPE_API_VERSION = config('STRIPE_API_VERSION', default='2023-10-16')
STRIPE_CONNECT_CLIENT_ID = config('STRIPE_CONNECT_CLIENT_ID', default='')
STRIPE_TEST_MODE = config('STRIPE_TEST_MODE', default=not IS_PRODUCTION, cast=bool)

# Payment Settings
PAYMENT_CURRENCY = config('PAYMENT_CURRENCY', default='KRW')
PAYMENT_SUCCESS_URL = config('PAYMENT_SUCCESS_URL', default='/payment/success/')
PAYMENT_CANCEL_URL = config('PAYMENT_CANCEL_URL', default='/payment/cancel/')

# OpenAI Settings - Enhanced
OPENAI_API_KEY = config('OPENAI_API_KEY', default='')
OPENAI_ORGANIZATION = config('OPENAI_ORGANIZATION', default='')
OPENAI_PROJECT = config('OPENAI_PROJECT', default='')

# API Keys validation
if IS_PRODUCTION and not OPENAI_API_KEY:
    import warnings
    warnings.warn('OPENAI_API_KEY is not set in production environment')

if IS_PRODUCTION and not STRIPE_SECRET_KEY:
    import warnings
    warnings.warn('STRIPE_SECRET_KEY is not set in production environment')

# API Documentation - Enhanced
SPECTACULAR_SETTINGS = {
    'TITLE': 'StudyMate API',
    'DESCRIPTION': 'AI 기반 개인화 학습 플랫폼 REST API',
    'VERSION': config('API_VERSION', default='1.0.0'),
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': '/api/',
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'expandResponses': '200,201',
        'pathInMiddlePanel': True,
    },
    'PREPROCESSING_HOOKS': [
        'spectacular.preprocessing.filter_spec_by_user',
    ],
    'SERVE_PERMISSIONS': ['rest_framework.permissions.IsAuthenticated'] if IS_PRODUCTION else [],
    'TAGS': [
        {'name': 'Authentication', 'description': '사용자 인증 관련 API'},
        {'name': 'Study', 'description': '학습 관리 API'},
        {'name': 'Quiz', 'description': '퀴즈 시스템 API'},
        {'name': 'Subscription', 'description': '구독 및 결제 API'},
        {'name': 'Notifications', 'description': '알림 시스템 API'},
        {'name': 'Health', 'description': '시스템 상태 확인 API'},
    ],
}

# JWT Settings - Enhanced security
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=config('JWT_ACCESS_TOKEN_LIFETIME', default=60, cast=int)),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=config('JWT_REFRESH_TOKEN_LIFETIME', default=7, cast=int)),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': config('JWT_AUDIENCE', default=None),
    'ISSUER': config('JWT_ISSUER', default='studymate-api'),
    'JWK_URL': None,
    'LEEWAY': timedelta(seconds=10),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'TOKEN_OBTAIN_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenObtainPairSerializer',
    'TOKEN_REFRESH_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',
}

# Cache Configuration
# Cache Configuration - Enhanced Redis setup
REDIS_URL = config('REDIS_URL', default='redis://localhost:6379')

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'{REDIS_URL}/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': config('REDIS_MAX_CONNECTIONS', default=50, cast=int),
                'retry_on_timeout': True,
                'health_check_interval': 30,
            },
            'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
        },
        'KEY_PREFIX': 'studymate',
        'TIMEOUT': config('CACHE_TIMEOUT', default=300, cast=int),
        'VERSION': 1,
    },
    'sessions': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'{REDIS_URL}/2',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'studymate_session',
        'TIMEOUT': config('SESSION_CACHE_TIMEOUT', default=3600, cast=int),
    },
    'tagged': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'{REDIS_URL}/3',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 30,
                'retry_on_timeout': True,
                'health_check_interval': 30,
            },
            'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
        },
        'KEY_PREFIX': 'studymate_tagged',
        'VERSION': 1,
        'TIMEOUT': 3600,  # 1시간 기본 타임아웃
    }
}

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'
SESSION_COOKIE_AGE = config('SESSION_COOKIE_AGE', default=3600, cast=int)
SESSION_SAVE_EVERY_REQUEST = False
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# Logging Configuration - Enhanced
LOG_LEVEL = config('LOG_LEVEL', default='INFO' if IS_PRODUCTION else 'DEBUG')
LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {module} {process:d} {thread:d} {pathname}:{lineno} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'simple': {
            'format': '{levelname} {asctime} {name} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'json': {
            'format': '{"timestamp": "{asctime}", "level": "{levelname}", "logger": "{name}", "message": "{message}", "module": "{module}", "function": "{funcName}", "line": {lineno}}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['require_debug_true'],
        },
        'file_info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'studymate_info.log',
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'studymate_error.log',
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'security.log',
            'maxBytes': 5 * 1024 * 1024,  # 5MB
            'backupCount': 10,
            'formatter': 'json',
        },
        'ai_operations': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'ai_operations.log',
            'maxBytes': 20 * 1024 * 1024,  # 20MB
            'backupCount': 5,
            'formatter': 'json',
        },
        'performance': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'performance.log',
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'backupCount': 3,
            'formatter': 'json',
        },
    },
    'root': {
        'handlers': ['console', 'file_info', 'file_error'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file_info'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['file_error', 'security_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'studymate_api': {
            'handlers': ['console', 'file_info', 'file_error'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'study.services': {
            'handlers': ['ai_operations'],
            'level': 'INFO',
            'propagate': True,
        },
        'performance': {
            'handlers': ['performance'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['file_info', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'stripe': {
            'handlers': ['security_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Sentry Configuration
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration
from sentry_sdk.integrations.celery import CeleryIntegration

sentry_sdk.init(
    dsn=config('SENTRY_DSN', default=''),
    integrations=[
        DjangoIntegration(
            transaction_style='url',
            middleware_spans=True,
            signals_spans=True,
            cache_spans=True,
        ),
        RedisIntegration(),
        CeleryIntegration(monitor_beat_tasks=True),
    ],
    traces_sample_rate=1.0,
    send_default_pii=True,
    environment=config('ENVIRONMENT', default='development'),
)

# Security Settings - Enhanced
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Production security settings
if IS_PRODUCTION or not DEBUG:
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=True, cast=bool)
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_COOKIE_SAMESITE = 'Strict'
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_TZ = True

# CSRF Settings
CSRF_TRUSTED_ORIGINS = config(
    'CSRF_TRUSTED_ORIGINS',
    default='',
    cast=lambda v: [s.strip() for s in v.split(',') if s.strip()]
)

# Rate limiting for critical endpoints
RATELIMIT_ENABLE = config('RATELIMIT_ENABLE', default=True, cast=bool)
RATELIMIT_USE_CACHE = 'default'

# AI Models Configuration - Enhanced
AI_MODELS = {
    'openai': {
        'api_key': config('OPENAI_API_KEY', default=''),
        'organization': config('OPENAI_ORG_ID', default=''),
        'models': {
            'gpt-3.5-turbo': {
                'max_tokens': 2000,
                'temperature': 0.7,
                'cost_per_1k_tokens': 0.002,
                'context_window': 4096,
            },
            'gpt-4': {
                'max_tokens': 2000,
                'temperature': 0.7,
                'cost_per_1k_tokens': 0.03,
                'context_window': 8192,
            },
            'gpt-4-turbo-preview': {
                'max_tokens': 4000,
                'temperature': 0.7,
                'cost_per_1k_tokens': 0.01,
                'context_window': 128000,
            },
        },
        'default_model': config('OPENAI_DEFAULT_MODEL', default='gpt-3.5-turbo'),
        'timeout': config('OPENAI_TIMEOUT', default=30, cast=int),
        'max_retries': config('OPENAI_MAX_RETRIES', default=3, cast=int),
    },
    'anthropic': {
        'api_key': config('ANTHROPIC_API_KEY', default=''),
        'models': {
            'claude-3-haiku-20240307': {
                'max_tokens': 2000,
                'temperature': 0.7,
                'cost_per_1k_tokens': 0.00025,
            },
            'claude-3-sonnet-20240229': {
                'max_tokens': 2000,
                'temperature': 0.7,
                'cost_per_1k_tokens': 0.003,
            },
        },
        'default_model': config('ANTHROPIC_DEFAULT_MODEL', default='claude-3-haiku-20240307'),
        'timeout': config('ANTHROPIC_TIMEOUT', default=30, cast=int),
    },
    'together': {
        'api_key': config('TOGETHER_API_KEY', default=''),
        'models': {
            'mistralai/Mixtral-8x7B-Instruct-v0.1': {
                'max_tokens': 2000,
                'temperature': 0.7,
                'cost_per_1k_tokens': 0.0006,
            },
        },
        'default_model': config('TOGETHER_DEFAULT_MODEL', default='mistralai/Mixtral-8x7B-Instruct-v0.1'),
        'timeout': config('TOGETHER_TIMEOUT', default=30, cast=int),
    },
    'fallback_strategy': {
        'enabled': config('AI_FALLBACK_ENABLED', default=True, cast=bool),
        'primary': 'openai',
        'secondary': 'anthropic',
        'tertiary': 'together',
    },
    'rate_limits': {
        'requests_per_minute': config('AI_RATE_LIMIT_RPM', default=100, cast=int),
        'tokens_per_minute': config('AI_RATE_LIMIT_TPM', default=40000, cast=int),
    }
}

# Performance Settings - Enhanced
DATA_UPLOAD_MAX_MEMORY_SIZE = config('DATA_UPLOAD_MAX_MEMORY_SIZE', default=10 * 1024 * 1024, cast=int)  # 10MB
FILE_UPLOAD_MAX_MEMORY_SIZE = config('FILE_UPLOAD_MAX_MEMORY_SIZE', default=10 * 1024 * 1024, cast=int)  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# Database query optimization
DATABASE_ROUTERS = []
DATABASE_TIMEOUT = config('DATABASE_TIMEOUT', default=300, cast=int)

# Email backend optimization
if IS_PRODUCTION:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_TIMEOUT = 30

# Database Optimization - Enhanced
if 'postgresql' in DATABASES['default']['ENGINE']:
    DATABASES['default']['OPTIONS'].update({
        'MAX_CONNS': config('DB_MAX_CONNS', default=20, cast=int),
        'MIN_CONNS': config('DB_MIN_CONNS', default=5, cast=int),
        'CONN_MAX_AGE': config('DB_CONN_MAX_AGE', default=300, cast=int),
        'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        'charset': 'utf8mb4',
    })

# Connection pooling for high load
if IS_PRODUCTION:
    DATABASES['default'].update({
        'ENGINE': 'django_prometheus.db.backends.postgresql',
    })

# Development Tools Configuration
if DEBUG:
    # Silk Configuration
    SILKY_PYTHON_PROFILER = True
    SILKY_PYTHON_PROFILER_BINARY = True
    SILKY_AUTHENTICATION = True
    SILKY_AUTHORISATION = True
    SILKY_MAX_REQUEST_BODY_SIZE = 1024  # KB
    SILKY_MAX_RESPONSE_BODY_SIZE = 1024  # KB
    SILKY_INTERCEPT_PERCENT = 100
    
    # Django Debug Toolbar
    if 'debug_toolbar' not in INSTALLED_APPS:
        INSTALLED_APPS.append('debug_toolbar')
    
    if 'debug_toolbar.middleware.DebugToolbarMiddleware' not in MIDDLEWARE:
        MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
    
    # Show toolbar for internal IPs
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = ['127.0.0.1', '10.0.2.2'] + [ip[:-1] + '1' for ip in ips]

# Health Check & Monitoring Settings
HEALTH_CHECK = {
    'TIMEOUT': config('HEALTH_CHECK_TIMEOUT', default=10, cast=int),
    'CACHE_TIMEOUT': config('HEALTH_CACHE_TIMEOUT', default=60, cast=int),
    'CHECKS': {
        'database': True,
        'cache': True,
        'storage': True,
        'celery': True,
        'external_apis': config('HEALTH_CHECK_EXTERNAL_APIS', default=False, cast=bool),
    }
}

# Metrics and Monitoring
METRICS_ENABLED = config('METRICS_ENABLED', default=IS_PRODUCTION, cast=bool)
PROMETHEUS_METRICS_EXPORT_PORT = config('PROMETHEUS_METRICS_PORT', default=8001, cast=int)

# Admin customization
ADMIN_SITE_HEADER = 'StudyMate 관리자'
ADMIN_SITE_TITLE = 'StudyMate Admin'
ADMIN_INDEX_TITLE = 'StudyMate 관리 대시보드'

# Additional third-party app settings
if METRICS_ENABLED:
    INSTALLED_APPS.extend([
        'django_prometheus',
    ])
    MIDDLEWARE.insert(0, 'django_prometheus.middleware.PrometheusBeforeMiddleware')
    MIDDLEWARE.append('django_prometheus.middleware.PrometheusAfterMiddleware')

# Custom settings for the application
STUDYMATE_SETTINGS = {
    'MAX_DAILY_SUMMARIES': config('MAX_DAILY_SUMMARIES', default=10, cast=int),
    'MAX_QUIZ_ATTEMPTS_PER_DAY': config('MAX_QUIZ_ATTEMPTS_PER_DAY', default=50, cast=int),
    'DEFAULT_STUDY_REMINDER_TIME': config('DEFAULT_STUDY_REMINDER_TIME', default='09:00'),
    'AI_RESPONSE_CACHE_TTL': config('AI_RESPONSE_CACHE_TTL', default=3600, cast=int),
    'USER_INACTIVITY_THRESHOLD_DAYS': config('USER_INACTIVITY_THRESHOLD_DAYS', default=30, cast=int),
    'SUBSCRIPTION_GRACE_PERIOD_DAYS': config('SUBSCRIPTION_GRACE_PERIOD_DAYS', default=3, cast=int),
    'NOTIFICATION_BATCH_SIZE': config('NOTIFICATION_BATCH_SIZE', default=100, cast=int),
    'MAX_FILE_UPLOAD_SIZE': config('MAX_FILE_UPLOAD_SIZE', default=5 * 1024 * 1024, cast=int),  # 5MB
    'SUPPORTED_IMAGE_FORMATS': ['JPEG', 'PNG', 'GIF', 'WEBP'],
    'API_RATE_LIMIT_BURST': config('API_RATE_LIMIT_BURST', default=10, cast=int),
    'CELERY_RESULT_EXPIRES': config('CELERY_RESULT_EXPIRES', default=3600, cast=int),
}

# Additional validation for production
if IS_PRODUCTION:
    if not ALLOWED_HOSTS:
        raise ValueError('ALLOWED_HOSTS must be set in production')
    if DEBUG:
        raise ValueError('DEBUG must be False in production')
    if not config('OPENAI_API_KEY'):
        raise ValueError('OPENAI_API_KEY must be set in production')
    if not config('STRIPE_SECRET_KEY'):
        raise ValueError('STRIPE_SECRET_KEY must be set in production')
    if not config('SENTRY_DSN'):
        import warnings
        warnings.warn('SENTRY_DSN is not set in production environment')

# Feature Flags
FEATURE_FLAGS = {
    'AI_FALLBACK_ENABLED': config('FEATURE_AI_FALLBACK', default=True, cast=bool),
    'ADVANCED_ANALYTICS': config('FEATURE_ADVANCED_ANALYTICS', default=IS_PRODUCTION, cast=bool),
    'BETA_FEATURES': config('FEATURE_BETA_FEATURES', default=not IS_PRODUCTION, cast=bool),
    'MAINTENANCE_MODE': config('FEATURE_MAINTENANCE_MODE', default=False, cast=bool),
    'USER_FEEDBACK_COLLECTION': config('FEATURE_USER_FEEDBACK', default=True, cast=bool),
    'A_B_TESTING': config('FEATURE_AB_TESTING', default=IS_PRODUCTION, cast=bool),
}

# Django Debug Toolbar specific settings
if DEBUG and 'debug_toolbar' in INSTALLED_APPS:
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG and not request.is_ajax(),
        'SHOW_TEMPLATE_CONTEXT': True,
        'ENABLE_STACKTRACES': True,
    }
    
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        'debug_toolbar.panels.profiling.ProfilingPanel',
    ]

# Error Handling & Logging Configuration
from studymate_api.logging_config import get_logging_config, setup_logging

# Setup logging configuration
LOGGING = get_logging_config(BASE_DIR)

# Initialize logging
setup_logging()

# Performance Monitoring Settings
SLOW_REQUEST_THRESHOLD_MS = config('SLOW_REQUEST_THRESHOLD_MS', default=1000, cast=int)
CRITICAL_REQUEST_THRESHOLD_MS = config('CRITICAL_REQUEST_THRESHOLD_MS', default=5000, cast=int)

# Rate Limiting Settings
RATE_LIMITS = {
    'default': {
        'requests': config('RATE_LIMIT_DEFAULT_REQUESTS', default=1000, cast=int),
        'window': config('RATE_LIMIT_DEFAULT_WINDOW', default=3600, cast=int)
    },
    'api': {
        'requests': config('RATE_LIMIT_API_REQUESTS', default=500, cast=int),
        'window': config('RATE_LIMIT_API_WINDOW', default=3600, cast=int)
    },
    'auth': {
        'requests': config('RATE_LIMIT_AUTH_REQUESTS', default=10, cast=int),
        'window': config('RATE_LIMIT_AUTH_WINDOW', default=300, cast=int)
    }
}

# Error Tracking Settings
ERROR_TRACKING = {
    'ENABLED': config('ERROR_TRACKING_ENABLED', default=not DEBUG, cast=bool),
    'SENSITIVE_DATA_FIELDS': [
        'password', 'token', 'secret', 'key', 'authorization',
        'stripe_key', 'openai_key', 'api_key', 'access_token',
        'refresh_token', 'session_key', 'credit_card', 'cvv'
    ]
}

# Version information
VERSION = config('VERSION', default='1.0.0')

# API Documentation (drf-spectacular) Settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'StudyMate API',
    'DESCRIPTION': '''
StudyMate API는 AI 기반 학습 플랫폼을 위한 RESTful API입니다.

## 주요 기능

- **🔐 사용자 관리**: 회원가입, 로그인, 프로필 관리, 이메일 인증
- **📚 학습 관리**: AI 기반 학습 요약 생성 및 관리, 개인화된 학습 경로
- **❓ 퀴즈 시스템**: 동적 퀴즈 생성, 실시간 평가, 진도 추적
- **💳 구독 관리**: Stripe 기반 구독 및 결제 시스템
- **🔔 알림 시스템**: 개인화된 학습 알림, 스케줄 관리

## 인증 방식

API는 JWT (JSON Web Token) 기반 인증을 사용합니다.

**헤더 형식:**
```
Authorization: Bearer <your-access-token>
```

## 응답 형식

모든 API 응답은 표준화된 JSON 형식을 따릅니다:

**성공 응답:**
```json
{
  "success": true,
  "message": "요청이 성공적으로 처리되었습니다.",
  "data": {},
  "timestamp": "2024-01-01T12:00:00Z"
}
```

**에러 응답:**
```json
{
  "error": true,
  "error_id": "uuid",
  "code": "ERROR_CODE",
  "message": "에러 메시지",
  "details": {},
  "timestamp": "2024-01-01T12:00:00Z"
}
```

## 제한사항

- **일반 API**: 사용자별 시간당 1000회
- **AI 생성**: 시간당 20회
- **인증 시도**: 5분당 10회
- **페이지 크기**: 최대 100개 항목

## 지원

- **이메일**: support@studymate.com
- **문서**: https://docs.studymate.com
- **상태**: https://status.studymate.com
    ''',
    'VERSION': VERSION,
    'SERVE_INCLUDE_SCHEMA': False,
    'SERVE_PERMISSIONS': ['rest_framework.permissions.IsAuthenticated'],
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': False,
        'defaultModelsExpandDepth': 1,
        'defaultModelExpandDepth': 1,
        'displayRequestDuration': True,
        'docExpansion': 'none',
        'filter': True,
        'showExtensions': True,
        'showCommonExtensions': True,
        'tryItOutEnabled': True,
    },
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'COMPONENT_SPLIT_REQUEST': True,
    'SORT_OPERATIONS': False,
    'ENUM_NAME_OVERRIDES': {
        'ValidationErrorEnum': 'studymate_api.enums.ValidationErrorEnum',
    },
    'POSTPROCESSING_HOOKS': [
        'studymate_api.schema_hooks.postprocess_schema_enums',
    ],
    'PREPROCESSING_HOOKS': [
        'studymate_api.schema_hooks.preprocess_exclude_paths',
    ],
    'SCHEMA_PATH_PREFIX': '/api/',
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'SERVERS': [
        {
            'url': 'https://api.studymate.com',
            'description': '운영 서버'
        },
        {
            'url': 'https://staging-api.studymate.com',
            'description': '스테이징 서버'
        },
        {
            'url': 'http://localhost:8000',
            'description': '개발 서버'
        }
    ],
    'EXTERNAL_DOCS': {
        'description': 'StudyMate 개발자 문서',
        'url': 'https://docs.studymate.com',
    },
    'CONTACT': {
        'name': 'StudyMate API 지원팀',
        'url': 'https://studymate.com/support',
        'email': 'support@studymate.com',
    },
    'LICENSE': {
        'name': 'Proprietary',
        'url': 'https://studymate.com/terms',
    },
    'TAGS': [
        {
            'name': '인증/사용자 관리',
            'description': '사용자 인증, 회원가입, 프로필 관리 관련 API'
        },
        {
            'name': '학습 관리',
            'description': '과목, 학습 요약, 진도 관리 관련 API'
        },
        {
            'name': '퀴즈 시스템',
            'description': '퀴즈 생성, 응시, 결과 관리 관련 API'
        },
        {
            'name': '구독 관리',
            'description': '구독 플랜, 결제, 할인 관리 관련 API'
        },
        {
            'name': '알림 시스템',
            'description': '알림 설정, 발송, 기기 관리 관련 API'
        },
        {
            'name': '관리자 기능',
            'description': '관리자 전용 기능 및 시스템 관리 API'
        },
        {
            'name': '모니터링',
            'description': '시스템 상태, 헬스체크, 메트릭 관련 API'
        }
    ]
}

# 고급 캐시 설정
ADVANCED_CACHE_SETTINGS = {
    'ENABLE_CACHE_WARMING': config('ENABLE_CACHE_WARMING', default=True, cast=bool),
    'AUTO_WARM_POPULAR_CONTENT': config('AUTO_WARM_POPULAR_CONTENT', default=True, cast=bool),
    'CACHE_WARMING_INTERVAL': config('CACHE_WARMING_INTERVAL', default=3600, cast=int),  # 1시간마다
    'MAX_CACHE_ENTRIES_PER_STRATEGY': config('MAX_CACHE_ENTRIES_PER_STRATEGY', default=10000, cast=int),
    'CACHE_STATISTICS_RETENTION_DAYS': config('CACHE_STATISTICS_RETENTION_DAYS', default=30, cast=int),
    'ENABLE_CACHE_MONITORING': config('ENABLE_CACHE_MONITORING', default=True, cast=bool),
    'CACHE_HEALTH_CHECK_INTERVAL': config('CACHE_HEALTH_CHECK_INTERVAL', default=300, cast=int),  # 5분마다
}
