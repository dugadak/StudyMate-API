name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10.0, 3.11.0]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy coverage pytest

    - name: Create .env file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=True
        ALLOWED_HOSTS=localhost,127.0.0.1
        DATABASE_URL=sqlite:///db.sqlite3
        REDIS_URL=redis://localhost:6379/0
        OPENAI_API_KEY=test-openai-key
        STRIPE_SECRET_KEY=sk_test_dummy
        STRIPE_PUBLISHABLE_KEY=pk_test_dummy
        AUTO_RECOVERY_ENABLED=False
        AB_TESTING_ENABLED=False
        ZERO_TRUST_ENABLED=False
        DISTRIBUTED_TRACING_ENABLED=False
        EOF

    - name: Run database migrations
      run: |
        python manage.py migrate --settings=studymate_api.test_settings

    - name: Code formatting check (Black)
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff .
      continue-on-error: true

    - name: Linting (flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Type checking (mypy)
      run: |
        mypy --config-file=mypy.ini .
      continue-on-error: true

  tests:
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.10.0, 3.11.0]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest pytest-django pytest-xvfb

    - name: Create .env file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-ci-${{ github.run_id }}
        DEBUG=True
        ALLOWED_HOSTS=localhost,127.0.0.1
        DATABASE_URL=sqlite:///test_db.sqlite3
        REDIS_URL=redis://localhost:6379/1
        OPENAI_API_KEY=test-openai-key
        STRIPE_SECRET_KEY=sk_test_dummy
        STRIPE_PUBLISHABLE_KEY=pk_test_dummy
        AUTO_RECOVERY_ENABLED=False
        AB_TESTING_ENABLED=False
        ZERO_TRUST_ENABLED=False
        DISTRIBUTED_TRACING_ENABLED=False
        EOF

    - name: Run migrations
      run: |
        python manage.py migrate --settings=studymate_api.test_settings

    - name: Run tests with coverage
      run: |
        coverage run --source='.' manage.py test --settings=studymate_api.test_settings
        coverage xml
        coverage report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.0

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
      continue-on-error: true

  performance-tests:
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.0

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Create .env file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-performance
        DEBUG=False
        ALLOWED_HOSTS=localhost,127.0.0.1
        DATABASE_URL=sqlite:///perf_test.sqlite3
        REDIS_URL=redis://localhost:6379/2
        OPENAI_API_KEY=test-openai-key
        STRIPE_SECRET_KEY=sk_test_dummy
        STRIPE_PUBLISHABLE_KEY=pk_test_dummy
        AUTO_RECOVERY_ENABLED=False
        AB_TESTING_ENABLED=False
        ZERO_TRUST_ENABLED=False
        DISTRIBUTED_TRACING_ENABLED=False
        EOF

    - name: Run performance tests
      run: |
        python manage.py migrate --settings=studymate_api.test_settings
        python performance_tests.py
      continue-on-error: true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 실제 배포 스크립트는 여기에 추가

  deploy-production:
    runs-on: ubuntu-latest
    needs: [tests, security-scan, performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 실제 배포 스크립트는 여기에 추가