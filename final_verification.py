#!/usr/bin/env python
"""
StudyMate API ÏµúÏ¢Ö Í≤ÄÏ¶ù Ïä§ÌÅ¨Î¶ΩÌä∏

Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî Îã§ÏùåÏùÑ Í≤ÄÏ¶ùÌï©ÎãàÎã§:
- Î™®Îì† Î™®Îìà import Í∞ÄÎä• Ïó¨Î∂Ä
- Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú
- ÌïÑÏàò ÏÑ§Ï†ï ÌôïÏù∏
- API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏùëÎãµ ÌôïÏù∏
- Î≥¥Ïïà ÏÑ§Ï†ï Í≤ÄÏ¶ù
- ÏÑ±Îä• Í∏∞Ï§Ä ÌôïÏù∏
"""

import os
import sys
import importlib
import subprocess
import requests
import json
from pathlib import Path
from typing import Dict, List, Tuple, Any
from datetime import datetime

# Django ÏÑ§Ï†ï Î°úÎìú
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'studymate_api.settings')

class StudyMateVerifier:
    """StudyMate API ÏµúÏ¢Ö Í≤ÄÏ¶ù ÌÅ¥ÎûòÏä§"""
    
    def __init__(self):
        self.base_dir = Path(__file__).resolve().parent
        self.results = []
        self.base_url = "http://localhost:8000"
        
    def log_result(self, test_name: str, success: bool, message: str, details: Any = None):
        """ÌÖåÏä§Ìä∏ Í≤∞Í≥º Î°úÍπÖ"""
        result = {
            'test_name': test_name,
            'success': success,
            'message': message,
            'details': details,
            'timestamp': datetime.now().isoformat()
        }
        self.results.append(result)
        
        status_icon = "‚úÖ" if success else "‚ùå"
        print(f"{status_icon} {test_name}: {message}")
        
        if details and not success:
            print(f"   ÏÑ∏Î∂ÄÏ†ïÎ≥¥: {details}")
    
    def verify_imports(self) -> bool:
        """Î™®Îì† Ï£ºÏöî Î™®Îìà import Í≤ÄÏ¶ù"""
        print("\nüì¶ Î™®Îìà Import Í≤ÄÏ¶ù")
        
        modules_to_test = [
            'studymate_api.settings',
            'studymate_api.urls',
            'studymate_api.cache',
            'studymate_api.exceptions',
            'studymate_api.middleware',
            'studymate_api.security',
            'studymate_api.validators',
            'studymate_api.types',
            'studymate_api.health',
            'studymate_api.monitoring_middleware',
            'accounts.models',
            'accounts.views',
            'accounts.serializers',
            'study.models',
            'study.services',
            'quiz.models',
            'subscription.models',
            'notifications.models'
        ]
        
        all_success = True
        
        for module_name in modules_to_test:
            try:
                importlib.import_module(module_name)
                self.log_result(f"Import {module_name}", True, "ÏÑ±Í≥µ")
            except ImportError as e:
                self.log_result(f"Import {module_name}", False, "Ïã§Ìå®", str(e))
                all_success = False
            except Exception as e:
                self.log_result(f"Import {module_name}", False, "ÏòàÏô∏ Î∞úÏÉù", str(e))
                all_success = False
        
        return all_success
    
    def verify_django_setup(self) -> bool:
        """Django ÏÑ§Ï†ï Í≤ÄÏ¶ù"""
        print("\n‚öôÔ∏è Django ÏÑ§Ï†ï Í≤ÄÏ¶ù")
        
        try:
            import django
            from django.conf import settings
            from django.core.management import execute_from_command_line
            
            django.setup()
            
            # Django Î≤ÑÏ†Ñ ÌôïÏù∏
            self.log_result("Django Î≤ÑÏ†Ñ", True, f"Django {django.get_version()}")
            
            # ÌïÑÏàò ÏÑ§Ï†ï ÌôïÏù∏
            required_settings = [
                'SECRET_KEY', 'DATABASES', 'INSTALLED_APPS', 
                'MIDDLEWARE', 'ROOT_URLCONF'
            ]
            
            for setting_name in required_settings:
                if hasattr(settings, setting_name):
                    value = getattr(settings, setting_name)
                    if value:
                        self.log_result(f"ÏÑ§Ï†ï {setting_name}", True, "Ï°¥Ïû¨")
                    else:
                        self.log_result(f"ÏÑ§Ï†ï {setting_name}", False, "ÎπÑÏñ¥ÏûàÏùå")
                        return False
                else:
                    self.log_result(f"ÏÑ§Ï†ï {setting_name}", False, "ÏóÜÏùå")
                    return False
            
            return True
            
        except Exception as e:
            self.log_result("Django ÏÑ§Ï†ï", False, "Ïã§Ìå®", str(e))
            return False
    
    def verify_database(self) -> bool:
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Î∞è ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌôïÏù∏"""
        print("\nüóÑÔ∏è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í≤ÄÏ¶ù")
        
        try:
            import django
            django.setup()
            
            from django.db import connection
            from django.core.management.commands.migrate import Command as MigrateCommand
            
            # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                result = cursor.fetchone()
                if result and result[0] == 1:
                    self.log_result("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞", True, "ÏÑ±Í≥µ")
                else:
                    self.log_result("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞", False, "Ïó∞Í≤∞ Ïã§Ìå®")
                    return False
            
            # ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏
            try:
                result = subprocess.run(
                    [sys.executable, 'manage.py', 'showmigrations', '--plan'],
                    capture_output=True, text=True, cwd=self.base_dir
                )
                
                if result.returncode == 0:
                    output = result.stdout
                    if '[X]' in output:  # Ï†ÅÏö©Îêú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÏù¥ ÏûàÏùå
                        self.log_result("ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú", True, "ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï†ÅÏö©Îê®")
                    else:
                        self.log_result("ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú", False, "ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÎØ∏Ï†ÅÏö©")
                        return False
                else:
                    self.log_result("ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌôïÏù∏", False, "Î™ÖÎ†π Ïã§Ìñâ Ïã§Ìå®", result.stderr)
                    return False
                    
            except Exception as e:
                self.log_result("ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌôïÏù∏", False, "Ïò§Î•ò", str(e))
                return False
            
            return True
            
        except Exception as e:
            self.log_result("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í≤ÄÏ¶ù", False, "Ïã§Ìå®", str(e))
            return False
    
    def verify_cache(self) -> bool:
        """Ï∫êÏãú ÏãúÏä§ÌÖú ÌôïÏù∏"""
        print("\nüöÄ Ï∫êÏãú ÏãúÏä§ÌÖú Í≤ÄÏ¶ù")
        
        try:
            import django
            django.setup()
            
            from django.core.cache import cache
            
            # Ï∫êÏãú ÏùΩÍ∏∞/Ïì∞Í∏∞ ÌÖåÏä§Ìä∏
            test_key = 'verification_test'
            test_value = 'test_value_123'
            
            cache.set(test_key, test_value, 60)
            cached_value = cache.get(test_key)
            
            if cached_value == test_value:
                self.log_result("Ï∫êÏãú ÏùΩÍ∏∞/Ïì∞Í∏∞", True, "ÏÑ±Í≥µ")
                cache.delete(test_key)  # Ï†ïÎ¶¨
                return True
            else:
                self.log_result("Ï∫êÏãú ÏùΩÍ∏∞/Ïì∞Í∏∞", False, "Ïã§Ìå®")
                return False
                
        except Exception as e:
            self.log_result("Ï∫êÏãú Í≤ÄÏ¶ù", False, "Ïã§Ìå®", str(e))
            return False
    
    def verify_api_endpoints(self) -> bool:
        """Ï£ºÏöî API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌôïÏù∏"""
        print("\nüåê API ÏóîÎìúÌè¨Ïù∏Ìä∏ Í≤ÄÏ¶ù")
        
        endpoints_to_test = [
            ('/health/', 'GET', 200),
            ('/health/ready/', 'GET', 200),
            ('/health/alive/', 'GET', 200),
            ('/metrics/', 'GET', 200),
            ('/api/docs/', 'GET', 200),
            ('/api/schema/', 'GET', 200),
        ]
        
        all_success = True
        
        for endpoint, method, expected_status in endpoints_to_test:
            try:
                if method == 'GET':
                    response = requests.get(f"{self.base_url}{endpoint}", timeout=10)
                else:
                    response = requests.post(f"{self.base_url}{endpoint}", timeout=10)
                
                if response.status_code == expected_status:
                    self.log_result(f"API {endpoint}", True, f"ÏùëÎãµ ÏΩîÎìú {response.status_code}")
                else:
                    self.log_result(f"API {endpoint}", False, 
                                  f"ÏòàÏÉÅ {expected_status}, Ïã§Ï†ú {response.status_code}")
                    all_success = False
                    
            except requests.exceptions.RequestException as e:
                self.log_result(f"API {endpoint}", False, "Ïó∞Í≤∞ Ïã§Ìå®", str(e))
                all_success = False
            except Exception as e:
                self.log_result(f"API {endpoint}", False, "Ïò§Î•ò", str(e))
                all_success = False
        
        return all_success
    
    def verify_security_settings(self) -> bool:
        """Î≥¥Ïïà ÏÑ§Ï†ï ÌôïÏù∏"""
        print("\nüîí Î≥¥Ïïà ÏÑ§Ï†ï Í≤ÄÏ¶ù")
        
        try:
            import django
            django.setup()
            
            from django.conf import settings
            
            security_checks = []
            
            # DEBUG ÏÑ§Ï†ï ÌôïÏù∏ (ÌîÑÎ°úÎçïÏÖòÏóêÏÑúÎäî FalseÏó¨Ïïº Ìï®)
            if hasattr(settings, 'DEBUG'):
                if not settings.DEBUG:
                    security_checks.append(("DEBUG ÏÑ§Ï†ï", True, "False (ÏïàÏ†Ñ)"))
                else:
                    security_checks.append(("DEBUG ÏÑ§Ï†ï", False, "True (ÏúÑÌóò)"))
            else:
                security_checks.append(("DEBUG ÏÑ§Ï†ï", False, "ÏÑ§Ï†ï ÏóÜÏùå"))
            
            # SECRET_KEY ÏÑ§Ï†ï ÌôïÏù∏
            if hasattr(settings, 'SECRET_KEY') and settings.SECRET_KEY:
                if len(settings.SECRET_KEY) >= 50:
                    security_checks.append(("SECRET_KEY Í∏∏Ïù¥", True, "Ï∂©Î∂ÑÌï®"))
                else:
                    security_checks.append(("SECRET_KEY Í∏∏Ïù¥", False, "ÎÑàÎ¨¥ ÏßßÏùå"))
            else:
                security_checks.append(("SECRET_KEY", False, "ÏÑ§Ï†ï ÏóÜÏùå"))
            
            # ALLOWED_HOSTS ÌôïÏù∏
            if hasattr(settings, 'ALLOWED_HOSTS') and settings.ALLOWED_HOSTS:
                if '*' not in settings.ALLOWED_HOSTS:
                    security_checks.append(("ALLOWED_HOSTS", True, "ÏïàÏ†ÑÌïòÍ≤å ÏÑ§Ï†ïÎê®"))
                else:
                    security_checks.append(("ALLOWED_HOSTS", False, "ÏôÄÏùºÎìúÏπ¥Îìú ÏÇ¨Ïö© (ÏúÑÌóò)"))
            else:
                security_checks.append(("ALLOWED_HOSTS", False, "ÏÑ§Ï†ï ÏóÜÏùå"))
            
            # Î≥¥Ïïà ÎØ∏Îì§Ïõ®Ïñ¥ ÌôïÏù∏
            required_middleware = [
                'django.middleware.security.SecurityMiddleware',
                'studymate_api.middleware.SecurityMiddleware',
                'studymate_api.middleware.RateLimitMiddleware'
            ]
            
            middleware = getattr(settings, 'MIDDLEWARE', [])
            for mw in required_middleware:
                if mw in middleware:
                    security_checks.append((f"ÎØ∏Îì§Ïõ®Ïñ¥ {mw.split('.')[-1]}", True, "ÌôúÏÑ±ÌôîÎê®"))
                else:
                    security_checks.append((f"ÎØ∏Îì§Ïõ®Ïñ¥ {mw.split('.')[-1]}", False, "ÎàÑÎùΩÎê®"))
            
            # Í≤∞Í≥º Î°úÍπÖ
            all_success = True
            for check_name, success, message in security_checks:
                self.log_result(check_name, success, message)
                if not success:
                    all_success = False
            
            return all_success
            
        except Exception as e:
            self.log_result("Î≥¥Ïïà ÏÑ§Ï†ï Í≤ÄÏ¶ù", False, "Ïã§Ìå®", str(e))
            return False
    
    def verify_file_structure(self) -> bool:
        """ÌïÑÏàò ÌååÏùº Íµ¨Ï°∞ ÌôïÏù∏"""
        print("\nüìÅ ÌååÏùº Íµ¨Ï°∞ Í≤ÄÏ¶ù")
        
        required_files = [
            'manage.py',
            'requirements.txt',
            'Dockerfile',
            'docker-compose.yml',
            '.env.example',
            'studymate_api/settings.py',
            'studymate_api/urls.py',
            'studymate_api/wsgi.py',
            'studymate_api/types.py',
            'studymate_api/security.py',
            'studymate_api/health.py',
            'pytest.ini',
            'mypy.ini',
            '.flake8',
            'pyproject.toml'
        ]
        
        required_directories = [
            'accounts',
            'study', 
            'quiz',
            'subscription',
            'notifications',
            'tests',
            'docker',
            'k8s',
            'scripts'
        ]
        
        all_success = True
        
        # ÌïÑÏàò ÌååÏùº ÌôïÏù∏
        for file_path in required_files:
            full_path = self.base_dir / file_path
            if full_path.exists():
                self.log_result(f"ÌååÏùº {file_path}", True, "Ï°¥Ïû¨")
            else:
                self.log_result(f"ÌååÏùº {file_path}", False, "ÏóÜÏùå")
                all_success = False
        
        # ÌïÑÏàò ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
        for dir_path in required_directories:
            full_path = self.base_dir / dir_path
            if full_path.exists() and full_path.is_dir():
                self.log_result(f"ÎîîÎ†âÌÜ†Î¶¨ {dir_path}", True, "Ï°¥Ïû¨")
            else:
                self.log_result(f"ÎîîÎ†âÌÜ†Î¶¨ {dir_path}", False, "ÏóÜÏùå")
                all_success = False
        
        return all_success
    
    def verify_dependencies(self) -> bool:
        """ÏùòÏ°¥ÏÑ± Ìå®ÌÇ§ÏßÄ ÌôïÏù∏"""
        print("\nüì¶ ÏùòÏ°¥ÏÑ± Í≤ÄÏ¶ù")
        
        critical_packages = [
            'django',
            'djangorestframework',
            'celery',
            'redis',
            'psycopg2',
            'gunicorn',
            'pytest',
            'mypy'
        ]
        
        all_success = True
        
        for package in critical_packages:
            try:
                result = subprocess.run(
                    [sys.executable, '-c', f'import {package}'],
                    capture_output=True, text=True
                )
                
                if result.returncode == 0:
                    self.log_result(f"Ìå®ÌÇ§ÏßÄ {package}", True, "ÏÑ§ÏπòÎê®")
                else:
                    self.log_result(f"Ìå®ÌÇ§ÏßÄ {package}", False, "ÏÑ§Ïπò ÏïàÎê®")
                    all_success = False
                    
            except Exception as e:
                self.log_result(f"Ìå®ÌÇ§ÏßÄ {package}", False, "ÌôïÏù∏ Ïã§Ìå®", str(e))
                all_success = False
        
        return all_success
    
    def generate_final_report(self) -> Dict[str, Any]:
        """ÏµúÏ¢Ö Í≤ÄÏ¶ù Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        print("\nüìã ÏµúÏ¢Ö Í≤ÄÏ¶ù Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±")
        
        total_tests = len(self.results)
        passed_tests = sum(1 for r in self.results if r['success'])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        
        report = {
            'verification_summary': {
                'total_tests': total_tests,
                'passed_tests': passed_tests,
                'failed_tests': failed_tests,
                'success_rate': success_rate,
                'timestamp': datetime.now().isoformat()
            },
            'test_results': self.results,
            'recommendations': []
        }
        
        # Ïã§Ìå®Ìïú ÌÖåÏä§Ìä∏Ïóê ÎåÄÌïú Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ±
        failed_results = [r for r in self.results if not r['success']]
        
        for failed_result in failed_results:
            if 'import' in failed_result['test_name'].lower():
                report['recommendations'].append(
                    f"Î™®Îìà {failed_result['test_name']} Ïò§Î•ò ÏàòÏ†ï ÌïÑÏöî"
                )
            elif 'database' in failed_result['test_name'].lower():
                report['recommendations'].append(
                    "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ§Ï†ï Î∞è ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌôïÏù∏ ÌïÑÏöî"
                )
            elif 'api' in failed_result['test_name'].lower():
                report['recommendations'].append(
                    "API ÏÑúÎ≤Ñ Ïã§Ìñâ ÏÉÅÌÉú ÌôïÏù∏ ÌïÑÏöî"
                )
            elif 'security' in failed_result['test_name'].lower():
                report['recommendations'].append(
                    "Î≥¥Ïïà ÏÑ§Ï†ï Í∞ïÌôî ÌïÑÏöî"
                )
        
        # Î¶¨Ìè¨Ìä∏ Ï†ÄÏû•
        report_file = self.base_dir / 'verification_report.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"   üìÑ Î¶¨Ìè¨Ìä∏ Ï†ÄÏû•Îê®: {report_file}")
        
        # ÏöîÏïΩ Ï∂úÎ†•
        print(f"\nüéØ ÏµúÏ¢Ö Í≤ÄÏ¶ù Í≤∞Í≥º:")
        print(f"   Ï¥ù ÌÖåÏä§Ìä∏: {total_tests}")
        print(f"   ÌÜµÍ≥º: {passed_tests}")
        print(f"   Ïã§Ìå®: {failed_tests}")
        print(f"   ÏÑ±Í≥µÎ•†: {success_rate:.2f}%")
        
        if success_rate >= 90:
            print(f"   üéâ Í≤ÄÏ¶ù ÏôÑÎ£å! StudyMate APIÍ∞Ä Î∞∞Ìè¨ Ï§ÄÎπÑÎêòÏóàÏäµÎãàÎã§.")
        elif success_rate >= 70:
            print(f"   ‚ö†Ô∏è ÏùºÎ∂Ä Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌïòÏßÄÎßå Í∏∞Î≥∏ Í∏∞Îä•ÏùÄ ÏûëÎèôÌï©ÎãàÎã§.")
        else:
            print(f"   ‚ùå Ïã¨Í∞ÅÌïú Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§. Î∞∞Ìè¨ Ï†Ñ ÏàòÏ†ïÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
        
        return report
    
    def run_all_verifications(self) -> bool:
        """Î™®Îì† Í≤ÄÏ¶ù Ïã§Ìñâ"""
        print("üîç StudyMate API ÏµúÏ¢Ö Í≤ÄÏ¶ù ÏãúÏûë")
        print("=" * 60)
        
        verification_steps = [
            ("ÌååÏùº Íµ¨Ï°∞", self.verify_file_structure),
            ("ÏùòÏ°¥ÏÑ±", self.verify_dependencies),
            ("Î™®Îìà Import", self.verify_imports),
            ("Django ÏÑ§Ï†ï", self.verify_django_setup),
            ("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§", self.verify_database),
            ("Ï∫êÏãú", self.verify_cache),
            ("Î≥¥Ïïà ÏÑ§Ï†ï", self.verify_security_settings),
            ("API ÏóîÎìúÌè¨Ïù∏Ìä∏", self.verify_api_endpoints),
        ]
        
        overall_success = True
        
        for step_name, step_function in verification_steps:
            try:
                success = step_function()
                if not success:
                    overall_success = False
            except Exception as e:
                self.log_result(f"{step_name} Í≤ÄÏ¶ù", False, "ÏòàÏô∏ Î∞úÏÉù", str(e))
                overall_success = False
        
        # ÏµúÏ¢Ö Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
        self.generate_final_report()
        
        print("\n" + "=" * 60)
        if overall_success:
            print("üéâ Î™®Îì† Í≤ÄÏ¶ùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")
        else:
            print("‚ö†Ô∏è ÏùºÎ∂Ä Í≤ÄÏ¶ùÏóêÏÑú Î¨∏Ï†úÍ∞Ä Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§.")
        
        return overall_success

def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    verifier = StudyMateVerifier()
    success = verifier.run_all_verifications()
    
    # Ï¢ÖÎ£å ÏΩîÎìú ÏÑ§Ï†ï
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()